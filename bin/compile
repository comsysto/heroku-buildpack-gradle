#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
OPT_DIR=$(cd $BIN_DIR/../opt; pwd) 
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

GRADLE_DIST="gradle-1.7"
GRADLE_TASK="build"

NODE_VERSION="0.10.17"
NPM_VERSION="1.3.8"

# parse and derive params
LP_DIR=`cd $(dirname $0); cd ..; pwd`
S3_BUCKET="heroku-buildpack-nodejs"

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

# create default system.properties 
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

# install JDK 
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}... "
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

export GRADLE_USER_HOME=$CACHE_DIR

if [ -f $BUILD_DIR/gradlew ] ; then
  BUILDCMD="./gradlew"
else
  if [ ! -d $CACHE_DIR/$GRADLE_DIST ] ; then
    cd $CACHE_DIR
    GRADLE_URL="http://services.gradle.org/distributions/$GRADLE_DIST-bin.zip"
    echo -n "-----> Installing $GRADLE_DIST....."
    curl --silent --location $GRADLE_URL | jar -x
    echo " done"
  fi
  BUILDCMD="gradle -I $OPT_DIR/init.gradle"
fi

BUILDCMD="$BUILDCMD $GRADLE_TASK"

cd $BUILD_DIR

export PATH=$CACHE_DIR/$GRADLE_DIST/bin:$PATH

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://${S3_BUCKET}.s3.amazonaws.com/$engine-$version.tgz"
  echo "Downloading ${package}" | indent
  curl $package -s -o - | tar xzf - -C $location
}

function install_nodejs() {
  VENDORED_NODE="$(mktmpdir node)"
  VENDORED_NPM="$(mktmpdir npm)"
  VENDORED_SCONS="$(mktmpdir scons)"

  echo "Using Node.js version: ${NODE_VERSION}" | indent
  echo "-----> Fetching Node.js binaries"
  package_download "nodejs" "${NODE_VERSION}" "${VENDORED_NODE}"
  package_download "npm" "${NPM_VERSION}" "${VENDORED_NPM}"
  chmod +x $VENDORED_NODE/bin/node
}

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

# install dependencies via package.json if available
if [ -f $BUILD_DIR/package.json ]; then
  echo "Installing Node.js dependencies" | indent
  bootstrap_node=$(mktmpdir bootstrap_node)
  install_nodejs $bootstrap_node
  run_npm "install --production"
  run_npm "rebuild"
  echo "Dependencies installed" | indent
fi
 
# build app
echo "-----> Building Gradle app..."
echo "       WARNING: The Gradle buildpack is currently in Beta."
echo "-----> executing $BUILDCMD"

# chmod +x /srv/tmp/buildpack-cache/gradle-1.6/bin/gradle

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

PROFILE_PATH="$BUILD_DIR/.profile.d/gradle.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH
